{"version":3,"sources":["js/ATMDeposit.jsx","js/Account.jsx","App.js","reportWebVitals.js","index.js"],"names":["ATMDeposit","onChange","isDeposit","validTransaction","console","log","Number","id","type","style","width","min","value","disabled","Currency","currentType","React","useState","deposit","setDeposit","totalState","setTotalState","setIsDeposit","atmMode","setAtmMode","setValidTransaction","status","Card","Body","onSubmit","event","preventDefault","Title","Text","e","selectedValue","target","handleModeSelect","name","returnValue","App","Jumbotron","fluid","Container","CardDeck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAeeA,EAfI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,iBAGzC,OADAC,QAAQC,IAAR,yBAA8BH,IAE5B,qCACA,kCAJa,CAAC,UAAW,YAKfI,QAAQJ,IADlB,IAEE,uBAAOK,GAAG,eAAeC,KAAK,SAASP,SAAUA,EAAUQ,MAAO,CAAEC,MAAO,QAAUC,IAAI,SAE3F,uBACA,uBAAOH,KAAK,SAASI,MAAM,SAASL,GAAG,eAAeM,UAAWV,Q,OC6DtDW,EAnEE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EACJC,IAAMC,SAAS,GADX,mBAC3BC,EAD2B,KAClBC,EADkB,OAEEH,IAAMC,SAAS,GAFjB,mBAE3BG,EAF2B,KAEfC,EAFe,OAGAL,IAAMC,UAAS,GAHf,mBAG3Bf,EAH2B,KAGhBoB,EAHgB,OAIJN,IAAMC,SAAS,IAJX,mBAI3BM,EAJ2B,KAIlBC,EAJkB,OAKcR,IAAMC,UAAS,GAL7B,mBAK3Bd,EAL2B,KAKTsB,EALS,KAO9BC,EAAM,UAAMX,EAAN,qBAA8BK,EAA9B,KAmCV,OACE,cAACO,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,KAAN,UACE,uBAAMC,SAnBS,SAACC,GAEpBT,EADenB,EAAYkB,EAAaF,EAAUE,EAAaF,GAE/DO,GAAoB,GACpBK,EAAMC,kBAeF,UACA,cAACJ,EAAA,EAAKK,MAAN,CAAYzB,GAAG,QAAf,SAAwBmB,IACxB,eAACC,EAAA,EAAKM,KAAN,WACE,4CACA,yBAAQhC,SAAU,SAACiC,GAAD,OAhBD,SAACJ,GACxB,IAAMK,EAAgBL,EAAMM,OAAOxB,MACnCY,EAAWW,GACU,YAAlBA,EACDb,GAAa,GACc,aAAlBa,GACTb,GAAa,GAUgBe,CAAiBH,IAAII,KAAK,OAAO/B,GAAG,cAA7D,UACE,wBAAQA,GAAG,eAAeK,MAAM,KAChC,wBAAQL,GAAG,oBAAoBK,MAAM,UAArC,qBACA,wBAAQL,GAAG,qBAAqBK,MAAM,WAAtC,yBAEAW,GACF,mCACE,cAAC,EAAD,CAAYtB,SAhDD,SAAC6B,GACpB,IAAMS,EAAcT,EAAMM,OAAOxB,MAGjC,OAFAR,QAAQC,IAAR,uBAA4BkC,IAC5BpB,EAAWb,OAAOiC,IACfA,GAAe,GAIE,aAAZhB,GAA0BgB,EAAcnB,OAH9CK,GAAoB,QAQpBA,GAAoB,IAmCsBvB,UAAWA,EAAWC,iBAAkBA,iB,gCC9BzEqC,EAtBH,kBACV,gCACE,cAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACF,eAACC,EAAA,EAAD,WACE,6CACA,8HAKJ,cAACA,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAAC,EAAD,CAAU7B,YAAY,cACpB,cAAC,EAAD,CAAUA,YAAY,QACtB,cAAC,EAAD,CAAUA,YAAY,QACtB,cAAC,EAAD,CAAUA,YAAY,iBCXb8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.607bc079.chunk.js","sourcesContent":["const ATMDeposit = ({ onChange, isDeposit, validTransaction }) => {\n  const choice = ['Deposit', 'Withdraw'];\n  console.log(`ATM isDeposit: ${isDeposit}`);\n  return (\n    <>\n    <label>\n      {choice[Number(!isDeposit)]}:\n      <input id=\"number-input\" type=\"number\" onChange={onChange} style={{ width: '5rem' }} min=\"0\"></input>\n    </label>\n    <hr />\n    <input type=\"submit\" value=\"Submit\" id=\"submit-input\" disabled={!validTransaction}></input>\n    </>\n  );\n};\n\nexport default ATMDeposit","import React from 'react';\nimport ATMDeposit from './ATMDeposit';\nimport Card from 'react-bootstrap/Card';\n\nconst Currency = ({currentType}) => {\n  const [deposit, setDeposit] = React.useState(0);\n  const [totalState, setTotalState] = React.useState(0);\n  const [isDeposit, setIsDeposit] = React.useState(true);\n  const [atmMode, setAtmMode] = React.useState(\"\");\n  const [validTransaction, setValidTransaction] = React.useState(false);\n\n  let status = `${currentType} Balance: ${totalState} `;\n  const handleChange = (event) => {\n    const returnValue = event.target.value;\n    console.log(`handleChange ${returnValue}`);\n    setDeposit(Number(returnValue));\n    if(returnValue <= 0){\n      setValidTransaction(false);\n      return;\n    }\n    else if(atmMode === \"Withdraw\" && returnValue > totalState) {\n      setValidTransaction(false);\n      return;\n    }\n    else {\n      setValidTransaction(true);\n      return;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    let newTotal = isDeposit ? totalState + deposit : totalState - deposit;\n    setTotalState(newTotal);\n    setValidTransaction(false);\n    event.preventDefault();\n  };\n\n  const handleModeSelect = (event) => {\n    const selectedValue = event.target.value;\n    setAtmMode(selectedValue);\n    if(selectedValue === \"Deposit\"){\n      setIsDeposit(true);\n    } else if (selectedValue === \"Withdraw\"){\n      setIsDeposit(false);\n    }\n  }\n  return (\n    <Card>\n      <Card.Body>\n        <form onSubmit={handleSubmit}>\n        <Card.Title id=\"total\">{status}</Card.Title>\n        <Card.Text>\n          <label>Action:</label>\n          <select onChange={(e) => handleModeSelect(e)} name=\"mode\" id=\"mode-select\">\n            <option id=\"no-selection\" value=\"\"></option>\n            <option id=\"deposit-selection\" value=\"Deposit\">Deposit</option>\n            <option id=\"withdraw-selection\" value=\"Withdraw\">Withdraw</option>\n          </select>\n          { atmMode &&\n          <>\n            <ATMDeposit onChange={handleChange} isDeposit={isDeposit} validTransaction={validTransaction}></ATMDeposit>\n            </>\n          }\n        </Card.Text>\n      </form>\n      </Card.Body>\n    </Card>\n    \n  );\n};\n\nexport default Currency","import Currency from './js/Account'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport CardDeck from 'react-bootstrap/CardDeck';\n\n\n\nconst App = () => (\n  <div>\n    <Jumbotron fluid>\n  <Container>\n    <h1>Crypto Bank</h1>\n    <p>\n      Welcome back, please enjoy that the features we have to offer to managing your profolio!\n    </p>\n  </Container>\n</Jumbotron>\n<Container>\n  <CardDeck>\n    <Currency currentType=\"US Dollar\" />\n      <Currency currentType=\"BTC\" />\n      <Currency currentType=\"ETH\" />\n      <Currency currentType=\"XRP\" />\n    </CardDeck>\n</Container>\n    \n  </div>\n);\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}